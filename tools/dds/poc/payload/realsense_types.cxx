// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file realsense_types.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "realsense_types.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>





realsense::STREAM_payload::STREAM_payload()
{
    // m_stream_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@a74868d
    m_stream_id = 0;
    // m_frame_number com.eprosima.idl.parser.typecode.PrimitiveTypeCode@12c8a2c0
    m_frame_number = 0;
    // m_payload com.eprosima.idl.parser.typecode.SequenceTypeCode@7e0e6aa2


}

realsense::STREAM_payload::~STREAM_payload()
{



}

realsense::STREAM_payload::STREAM_payload(
        const STREAM_payload& x)
{
    m_stream_id = x.m_stream_id;
    m_frame_number = x.m_frame_number;
    m_payload = x.m_payload;
}

realsense::STREAM_payload::STREAM_payload(
        STREAM_payload&& x)
{
    m_stream_id = x.m_stream_id;
    m_frame_number = x.m_frame_number;
    m_payload = std::move(x.m_payload);
}

realsense::STREAM_payload& realsense::STREAM_payload::operator =(
        const STREAM_payload& x)
{

    m_stream_id = x.m_stream_id;
    m_frame_number = x.m_frame_number;
    m_payload = x.m_payload;

    return *this;
}

realsense::STREAM_payload& realsense::STREAM_payload::operator =(
        STREAM_payload&& x)
{

    m_stream_id = x.m_stream_id;
    m_frame_number = x.m_frame_number;
    m_payload = std::move(x.m_payload);

    return *this;
}

bool realsense::STREAM_payload::operator ==(
        const STREAM_payload& x) const
{

    return (m_stream_id == x.m_stream_id && m_frame_number == x.m_frame_number && m_payload == x.m_payload);
}

bool realsense::STREAM_payload::operator !=(
        const STREAM_payload& x) const
{
    return !(*this == x);
}

size_t realsense::STREAM_payload::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (MAX_IMAGE_PAYLOAD_SIZE * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t realsense::STREAM_payload::getCdrSerializedSize(
        const realsense::STREAM_payload& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.payload().size() > 0)
    {
        current_alignment += (data.payload().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void realsense::STREAM_payload::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_stream_id;
    scdr << m_frame_number;
    scdr << m_payload;

}

void realsense::STREAM_payload::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_stream_id;
    dcdr >> m_frame_number;
    dcdr >> m_payload;
}

/*!
 * @brief This function sets a value in member stream_id
 * @param _stream_id New value for member stream_id
 */
void realsense::STREAM_payload::stream_id(
        uint64_t _stream_id)
{
    m_stream_id = _stream_id;
}

/*!
 * @brief This function returns the value of member stream_id
 * @return Value of member stream_id
 */
uint64_t realsense::STREAM_payload::stream_id() const
{
    return m_stream_id;
}

/*!
 * @brief This function returns a reference to member stream_id
 * @return Reference to member stream_id
 */
uint64_t& realsense::STREAM_payload::stream_id()
{
    return m_stream_id;
}

/*!
 * @brief This function sets a value in member frame_number
 * @param _frame_number New value for member frame_number
 */
void realsense::STREAM_payload::frame_number(
        uint64_t _frame_number)
{
    m_frame_number = _frame_number;
}

/*!
 * @brief This function returns the value of member frame_number
 * @return Value of member frame_number
 */
uint64_t realsense::STREAM_payload::frame_number() const
{
    return m_frame_number;
}

/*!
 * @brief This function returns a reference to member frame_number
 * @return Reference to member frame_number
 */
uint64_t& realsense::STREAM_payload::frame_number()
{
    return m_frame_number;
}

/*!
 * @brief This function copies the value in member payload
 * @param _payload New value to be copied in member payload
 */
void realsense::STREAM_payload::payload(
        const std::vector<uint8_t>& _payload)
{
    m_payload = _payload;
}

/*!
 * @brief This function moves the value in member payload
 * @param _payload New value to be moved in member payload
 */
void realsense::STREAM_payload::payload(
        std::vector<uint8_t>&& _payload)
{
    m_payload = std::move(_payload);
}

/*!
 * @brief This function returns a constant reference to member payload
 * @return Constant reference to member payload
 */
const std::vector<uint8_t>& realsense::STREAM_payload::payload() const
{
    return m_payload;
}

/*!
 * @brief This function returns a reference to member payload
 * @return Reference to member payload
 */
std::vector<uint8_t>& realsense::STREAM_payload::payload()
{
    return m_payload;
}

size_t realsense::STREAM_payload::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool realsense::STREAM_payload::isKeyDefined()
{
    return false;
}

void realsense::STREAM_payload::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

realsense::OP_payload::OP_payload()
{
    // m_op com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2e3fc542
    m_op = 0;
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@150c158
    m_id = 0;
    // m_data com.eprosima.idl.parser.typecode.ArrayTypeCode@4524411f
    memset(&m_data, 0, (5) * 8);

}

realsense::OP_payload::~OP_payload()
{



}

realsense::OP_payload::OP_payload(
        const OP_payload& x)
{
    m_op = x.m_op;
    m_id = x.m_id;
    m_data = x.m_data;
}

realsense::OP_payload::OP_payload(
        OP_payload&& x)
{
    m_op = x.m_op;
    m_id = x.m_id;
    m_data = std::move(x.m_data);
}

realsense::OP_payload& realsense::OP_payload::operator =(
        const OP_payload& x)
{

    m_op = x.m_op;
    m_id = x.m_id;
    m_data = x.m_data;

    return *this;
}

realsense::OP_payload& realsense::OP_payload::operator =(
        OP_payload&& x)
{

    m_op = x.m_op;
    m_id = x.m_id;
    m_data = std::move(x.m_data);

    return *this;
}

bool realsense::OP_payload::operator ==(
        const OP_payload& x) const
{

    return (m_op == x.m_op && m_id == x.m_id && m_data == x.m_data);
}

bool realsense::OP_payload::operator !=(
        const OP_payload& x) const
{
    return !(*this == x);
}

size_t realsense::OP_payload::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((5) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t realsense::OP_payload::getCdrSerializedSize(
        const realsense::OP_payload& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    if ((5) > 0)
    {
        current_alignment += ((5) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }


    return current_alignment - initial_alignment;
}

void realsense::OP_payload::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_op;
    scdr << m_id;
    scdr << m_data;


}

void realsense::OP_payload::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_op;
    dcdr >> m_id;
    dcdr >> m_data;

}

/*!
 * @brief This function sets a value in member op
 * @param _op New value for member op
 */
void realsense::OP_payload::op(
        uint64_t _op)
{
    m_op = _op;
}

/*!
 * @brief This function returns the value of member op
 * @return Value of member op
 */
uint64_t realsense::OP_payload::op() const
{
    return m_op;
}

/*!
 * @brief This function returns a reference to member op
 * @return Reference to member op
 */
uint64_t& realsense::OP_payload::op()
{
    return m_op;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void realsense::OP_payload::id(
        uint64_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint64_t realsense::OP_payload::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint64_t& realsense::OP_payload::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void realsense::OP_payload::data(
        const std::array<uint64_t, 5>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void realsense::OP_payload::data(
        std::array<uint64_t, 5>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::array<uint64_t, 5>& realsense::OP_payload::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::array<uint64_t, 5>& realsense::OP_payload::data()
{
    return m_data;
}

size_t realsense::OP_payload::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool realsense::OP_payload::isKeyDefined()
{
    return false;
}

void realsense::OP_payload::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

